// Generated by CoffeeScript 1.3.3
var Events, Log, Module, Opf, moduleKeywords,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Events = {
  bind: function(ev, callback) {
    var calls, evs, name, _i, _len;
    evs = ev.split(' ');
    calls = this.hasOwnProperty('_callbacks') && this._callbacks || (this._callbacks = {});
    for (_i = 0, _len = evs.length; _i < _len; _i++) {
      name = evs[_i];
      calls[name] || (calls[name] = []);
      calls[name].push(callback);
    }
    return this;
  },
  one: function(ev, callback) {
    return this.bind(ev, function() {
      this.unbind(ev, arguments.callee);
      return callback.apply(this, arguments);
    });
  },
  trigger: function() {
    var args, callback, ev, list, _i, _len, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    ev = args.shift();
    list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
    if (!list) {
      return;
    }
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      callback = list[_i];
      if (callback.apply(this, args) === false) {
        break;
      }
    }
    return true;
  },
  unbind: function(ev, callback) {
    var cb, i, list, _i, _len, _ref;
    if (!ev) {
      this._callbacks = {};
      return this;
    }
    list = (_ref = this._callbacks) != null ? _ref[ev] : void 0;
    if (!list) {
      return this;
    }
    if (!callback) {
      delete this._callbacks[ev];
      return this;
    }
    for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
      cb = list[i];
      if (!(cb === callback)) {
        continue;
      }
      list = list.slice();
      list.splice(i, 1);
      this._callbacks[ev] = list;
      break;
    }
    return this;
  }
};

Log = {
  trace: true,
  logPrefix: '(App)',
  log: function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (!Opf.debug) {
      return;
    }
    if (this.logPrefix) {
      args.unshift(this.logPrefix);
    }
    if (typeof console !== "undefined" && console !== null) {
      if (typeof console.log === "function") {
        console.log.apply(console, args);
      }
    }
    return this;
  }
};

moduleKeywords = ['included', 'extended'];

Module = (function() {

  Module.include = function(obj) {
    var key, value, _ref;
    if (!obj) {
      throw 'include(obj) requires obj';
    }
    for (key in obj) {
      value = obj[key];
      if (__indexOf.call(moduleKeywords, key) < 0) {
        this.prototype[key] = value;
      }
    }
    if ((_ref = obj.included) != null) {
      _ref.apply(this);
    }
    return this;
  };

  Module.extend = function(obj) {
    var key, value, _ref;
    if (!obj) {
      throw 'extend(obj) requires obj';
    }
    for (key in obj) {
      value = obj[key];
      if (__indexOf.call(moduleKeywords, key) < 0) {
        this[key] = value;
      }
    }
    if ((_ref = obj.extended) != null) {
      _ref.apply(this);
    }
    return this;
  };

  Module.proxy = function(func) {
    var _this = this;
    return function() {
      return func.apply(_this, arguments);
    };
  };

  Module.prototype.proxy = function(func) {
    var _this = this;
    return function() {
      return func.apply(_this, arguments);
    };
  };

  function Module() {
    if (typeof this.init === "function") {
      this.init.apply(this, arguments);
    }
  }

  return Module;

})();

Opf = this.Opf = {};

module.exports = Opf;

Opf.version = '0.0.5';

Opf.debug = false;

Opf.Events = Events;

Opf.Log = Log;

Opf.log = Log.log;

Opf.Module = Module;

Module.extend.call(Opf, Events);